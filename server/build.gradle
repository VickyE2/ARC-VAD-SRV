apply plugin: 'application'


java.sourceCompatibility = 8
java.targetCompatibility = 8
if (JavaVersion.current().isJava9Compatible()) {
        compileJava.options.release.set(8)
}

mainClassName = 'com.arcvad.schoolquest.server.server.ARCServer'
application.setMainClass(mainClassName)
eclipse.project.name = appName + '-server'

dependencies {
  implementation 'org.java-websocket:Java-WebSocket:1.5.2'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
  implementation "javax.xml.bind:jaxb-api:2.3.0"
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
  implementation 'com.sun.xml.bind:jaxb-impl:2.3.3'
  implementation 'org.spongepowered:configurate-yaml:4.1.2'
  implementation 'org.spongepowered:configurate-jackson:4.1.2'
  implementation 'org.spongepowered:configurate-xml:4.1.2'
}

jar {
  archiveBaseName.set(appName)
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
  }
// setting the manifest makes the JAR runnable.
  manifest {
    attributes 'Main-Class': project.mainClassName
  }
// this last step may help on some OSes that need extra instruction to make runnable JARs.
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
task dist(dependsOn: [jar]) {
}
